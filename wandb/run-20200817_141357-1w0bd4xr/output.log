W&B Run: https://app.wandb.ai/matheus-asilva/alzheimer-dl/runs/1w0bd4xr
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
conv2d (Conv2D)              (None, 222, 222, 32)      896       
_________________________________________________________________
conv2d_1 (Conv2D)            (None, 220, 220, 64)      18496     
_________________________________________________________________
max_pooling2d (MaxPooling2D) (None, 110, 110, 64)      0         
_________________________________________________________________
dropout (Dropout)            (None, 110, 110, 64)      0         
_________________________________________________________________
flatten (Flatten)            (None, 774400)            0         
_________________________________________________________________
dense (Dense)                (None, 128)               99123328  
_________________________________________________________________
dropout_1 (Dropout)          (None, 128)               0         
_________________________________________________________________
dense_1 (Dense)              (None, 3)                 387       
=================================================================
Total params: 99,143,107
Trainable params: 99,143,107
Non-trainable params: 0
_________________________________________________________________
Epoch 1/10
Traceback (most recent call last):
  File "<stdin>", line 6, in <module>
  File "D:\TCC\alzheimer-deep-learning\training\util.py", line 46, in train_model
    _history = model.fit(dataset=dataset, batch_size=batch_size, epochs=epochs, callbacks=callbacks)
  File "D:\TCC\alzheimer-deep-learning\architecture\models\base.py", line 57, in fit
    valdation_data=(dataset.X_val, dataset.y_val)
  File "C:\Users\mathe\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\keras\engine\training.py", line 66, in _method_wrapper
    return method(self, *args, **kwargs)
  File "C:\Users\mathe\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\keras\engine\training.py", line 785, in fit
    tmp_logs = train_function(iterator)
  File "C:\Users\mathe\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\eager\def_function.py", line 580, in __call__
    result = self._call(*args, **kwds)
  File "C:\Users\mathe\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\eager\def_function.py", line 627, in _call
    self._initialize(args, kwds, add_initializers_to=initializers)
  File "C:\Users\mathe\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\eager\def_function.py", line 506, in _initialize
    *args, **kwds))
  File "C:\Users\mathe\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\eager\function.py", line 2446, in _get_concrete_function_internal_garbage_collected
    graph_function, _, _ = self._maybe_define_function(args, kwargs)
  File "C:\Users\mathe\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\eager\function.py", line 2777, in _maybe_define_function
    graph_function = self._create_graph_function(args, kwargs)
  File "C:\Users\mathe\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\eager\function.py", line 2667, in _create_graph_function
    capture_by_value=self._capture_by_value),
  File "C:\Users\mathe\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\framework\func_graph.py", line 981, in func_graph_from_py_func
    func_outputs = python_func(*func_args, **func_kwargs)
  File "C:\Users\mathe\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\eager\def_function.py", line 441, in wrapped_fn
    return weak_wrapped_fn().__wrapped__(*args, **kwds)
  File "C:\Users\mathe\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\framework\func_graph.py", line 968, in wrapper
    raise e.ag_error_metadata.to_exception(e)
ValueError: in user code:

    C:\Users\mathe\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\keras\engine\training.py:505 train_function  *
        outputs = self.distribute_strategy.run(
    C:\Users\mathe\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\distribute\distribute_lib.py:951 run  **
        return self._extended.call_for_each_replica(fn, args=args, kwargs=kwargs)
    C:\Users\mathe\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\distribute\distribute_lib.py:2290 call_for_each_replica
        return self._call_for_each_replica(fn, args, kwargs)
    C:\Users\mathe\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\distribute\distribute_lib.py:2649 _call_for_each_replica
        return fn(*args, **kwargs)
    C:\Users\mathe\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\keras\engine\training.py:467 train_step  **
        y, y_pred, sample_weight, regularization_losses=self.losses)
    C:\Users\mathe\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\keras\engine\compile_utils.py:204 __call__
        loss_value = loss_obj(y_t, y_p, sample_weight=sw)
    C:\Users\mathe\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\keras\losses.py:143 __call__
        losses = self.call(y_true, y_pred)
    C:\Users\mathe\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\keras\losses.py:246 call
        return self.fn(y_true, y_pred, **self._fn_kwargs)
    C:\Users\mathe\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\keras\losses.py:1527 categorical_crossentropy
        return K.categorical_crossentropy(y_true, y_pred, from_logits=from_logits)
    C:\Users\mathe\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\keras\backend.py:4561 categorical_crossentropy
        target.shape.assert_is_compatible_with(output.shape)
    C:\Users\mathe\AppData\Roaming\Python\Python37\site-packages\tensorflow\python\framework\tensor_shape.py:1117 assert_is_compatible_with
        raise ValueError("Shapes %s and %s are incompatible" % (self, other))

    ValueError: Shapes (None, 1) and (None, 3) are incompatible

  File "<stdin>", line 1
    if EARLY_STOPPING:
    ^
IndentationError: unexpected indent
  File "<stdin>", line 1
    early_stopping = EarlyStopping(monitor='val_loss', min_delta=.01, patience=3, verbose=1, mode='auto')
    ^
IndentationError: unexpected indent
  File "<stdin>", line 1
    callbacks.append(early_stopping)
    ^
IndentationError: unexpected indent
  File "<stdin>", line 1
    if use_wandb:
    ^
IndentationError: unexpected indent
  File "<stdin>", line 1
    image_callback = WandbImageLogger(model, dataset)
    ^
IndentationError: unexpected indent
  File "<stdin>", line 1
    wandb_callback = WandbCallback()
    ^
IndentationError: unexpected indent
  File "<stdin>", line 1
    callbacks.append(image_callback)
    ^
IndentationError: unexpected indent
  File "<stdin>", line 1
    callbacks.append(wandb_callback)
    ^
IndentationError: unexpected indent
  File "<stdin>", line 1
    model.network.summary()
    ^
IndentationError: unexpected indent
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
conv2d (Conv2D)              (None, 222, 222, 32)      896       
_________________________________________________________________
conv2d_1 (Conv2D)            (None, 220, 220, 64)      18496     
_________________________________________________________________
max_pooling2d (MaxPooling2D) (None, 110, 110, 64)      0         
_________________________________________________________________
dropout (Dropout)            (None, 110, 110, 64)      0         
_________________________________________________________________
flatten (Flatten)            (None, 774400)            0         
_________________________________________________________________
dense (Dense)                (None, 128)               99123328  
_________________________________________________________________
